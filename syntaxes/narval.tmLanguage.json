{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "narval",
  "patterns": [
    {
      "include": "#comments"
    },
    {
      "include": "#sizes"
    },
    {
      "include": "#types"
    },
    {
      "include": "#keywords"
    },

    {
      "include": "#strings"
    },
    {
      "include": "#numbers"
    },
    {
      "include": "#functions"
    },
    {
      "include": "#constants"
    },
    {
      "include": "#variables"
    },
    {
      "include": "#operators"
    }
  ],
  "repository": {
    "functions": {
      "patterns": [
        {
          "name": "entity.name.function",
          "match": "(\\w+)(?=\\()"
        },
        {
          "name": "entity.name.function",
          "match": "\\b(?![^\\w])(\\w+)(?=\\s*[\\(\\{])"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.narval",
          "match": "(?<!\\=)\\=(?!\\=)"
        },
        {
          "name": "keyword.operator.narval",
          "match": "(?<=[a-zA-Z_])<|>(?=[a-zA-Z_])"
        },
        {
          "name": "keyword.operator.narval",
          "match": "(?<!:):(?!:)"
        },
        {
          "name": "keyword.operator.comparison.narval",
          "match": "::|(?<=[^a-zA-Z])<(?=[^a-zA-Z])|(?<=[^a-zA-Z])>(?=[^a-zA-Z])|[?\\|=!*+\\^\\-/]"
        }
      ]
    },
    "variables": {
      "patterns": [
        {
          "name": "entity.name.class",
          "match": "(?<=unit:)(\\w+)(?=:)"
        },
        {
          "name": "variable",
          "match": "\\b(?![0-9])\\w+\\b"
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "name": "constant.numeric",
          "match": "\\b0[xX][0-9a-fA-F]+\\b|\\b0[oO][0-7]+\\b|\\b0[bB][01]+\\b|\\b(\\.\\d+|\\d+\\.|\\d+\\.\\d*([eE][+-]?\\d+)?|\\d*\\.\\d+([eE][+-]?\\d+)?)\\b|\\b\\d+[eE][+-]?\\d+\\b|\\b\\d+\\b"
        }
      ]
    },
    "sizes": {
      "patterns": [
        {
          "name": "storage",
          "match": "\\b(unit|auto|byte|word|dword|qword|resb|resw|resd|resq|val|enum)\\b"
        }
      ]
    },
    "types": {
      "patterns": [
        {
          "name": "entity.name.type",
          "match": "\\b((?<=: )\\w+(?=\\s*(\\{|\\=)))\\b|\\b((?<=:)\\w+(?=\\s*(\\{|\\=)))\\b"
        },
        {
          "name": "entity.name.type",
          "match": "\\b(integer|decimal|text|boolean|Object|Array)\\b"
        }
      ]
    },
    "comments": {
      "patterns": [
        {
          "name": "comment.block.narval",
          "begin": "/\\*",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.comment.narval"
            }
          },
          "end": "\\*/",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.comment.narval"
            }
          }
        },
        {
          "name": "comment.line.double-slash.narval",
          "match": "//.*"
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.narval",
          "match": "\\b(if|elif|else|label|while|for|from|import|loop|return|break|continue|when|as|private|public)\\b"
        }
      ]
    },
    "constants": {
      "patterns": [
        {
          "name": "constant",
          "match": "\\b(true|false|null|undefined)\\b|\\b[A-Z_]+\\b"
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.double.narval",
          "begin": "\"|'",
          "end": "\"|'",
          "patterns": [
            {
              "name": "constant.character.escape.narval",
              "match": "\\\\."
            },
            {
              "name": "expression.embedded.narval",
              "begin": "\\{\\{",
              "end": "\\}\\}",
              "patterns": [
                {
                  "include": "#expressions"
                }
              ]
            }
          ]
        }
      ]
    },
    "expressions": {
      "patterns": [
        {
          "name": "keyword.control.narval",
          "match": "\\b(if|else|while|for|return|break|continue|when|as|private|public|undefined|Null)\\b"
        },
        {
          "name": "constant.numeric",
          "match": "\\b0[xX][0-9a-fA-F]+\\b|\\b0[oO][0-7]+\\b|\\b0[bB][01]+\\b|\\b\\d+\\b|\\b\\d+\\.\\b|\\b\\.\\d+\\b|\\b\\d+\\.[eE][+-]?\\d+\\b|\\b\\.\\d+[eE][+-]?\\d+\\b|\\b\\d+[eE][+-]?\\d+\\b|\\b\\d+\\.\\b|\\b\\.\\d+\\b"
        },
        {
          "name": "variable.parameter.narval",
          "match": "(?<=::\\s*)(\\w+)(?=\\s*(,|\\)))"
        },
        {
          "name": "entity.name.function",
          "match": "(\\w+)(?=:\\()"
        },
        {
          "name": "entity.name.function",
          "match": "(?<=label:)(\\w+)(?=:)"
        },
        {
          "name": "variable.narval",
          "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b"
        },
        {
          "name": "keyword.operator.narval",
          "match": "<<"
        },
        {
          "name": "keyword.operator.narval",
          "match": "(?<=[a-zA-Z_])<|>(?=[a-zA-Z_])"
        },
        {
          "name": "keyword.operator.narval",
          "match": "(?<!:):(?!:)"
        },
        {
          "name": "keyword.operator.comparison.narval",
          "match": "::|(?<=[^a-zA-Z])<(?=[^a-zA-Z])|(?<=[^a-zA-Z])>(?=[^a-zA-Z])|[?\\|=!*+\\^\\-/]"
        }
      ]
    }
  },
  "scopeName": "source.nv"
}
